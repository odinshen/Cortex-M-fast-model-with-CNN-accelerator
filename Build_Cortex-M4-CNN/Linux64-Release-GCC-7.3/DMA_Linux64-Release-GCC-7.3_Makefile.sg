# vim: ft=make
# Template for makefile generation.
# Copyright ARM Limited 2007-2011 All Rights Reserved.
#
# The Makefile generated from this template is designed to be invoke by simgen.
#

# Some targets are used for internal reasons and are therefore phony
# - scx        For collecting together SystemC export targets
# - clean      For cleaning the project
# - isim       Alias for isim_system
# - pre_comp   Alias for pre-compiled header target
# - post_build Post-build event target
.PHONY: scx clean pre_comp post_build

TOP_COMPONENT=DMA
BUILD_DIR = ./Linux64-Release-GCC-7.3/
OUT_DIR = gen
CONFIG = Linux64-Release-GCC-7.3

PVVERSION_H               = $(PVLIB_HOME)/include/pv/PVVersion.h
DEPENDENCY_FILE           = $(OUT_DIR)/.__pvlib_dependency__

ifeq (,$(wildcard $(PVVERSION_H)))
    $(error "Couldn't find $(PVVERSION_H), perhaps $$PVLIB_HOME not set correctly?")
endif


# Dependencies are generated by the compiler, if they are present include them.
# GNU make 3.80 present on RHEL4 warns if an empty list of files is given to -include
# this is not useful as the biggest use for it is a lists of .d files which are
# generated by the build and won't exist on a fresh build. This is corrected in
# GNU make 3.81
-include WORKAROUND_FOR_MAKE_380_WARNING_EMPTY_FILES $(wildcard $(OUT_DIR)/*.d)

CXX = g++
AR  = ar
RANLIB = ranlib
CXXFLAGS_EXT = -pthread -march=core2 -O3 -Wall -std=c++11 -Wno-deprecated -Wno-unused-function -pipe -fPIC
CPPFLAGS_EXT = -Igen -I$(PVLIB_HOME)/include/fmruntime -I$(PVLIB_HOME)/include -I$(MAXCORE_HOME)/AMBA-PV/include -I$(PVLIB_HOME)/examples/SystemCExport/Common -I$(PVLIB_HOME)/examples/SystemCExport/Common/include -I$(PVLIB_HOME)/include/fmruntime/eslapi -I$(PVLIB_HOME)/Iris/include  -I../LISA/C/ -I $(SYSTEMC_HOME)/include -DEXPORT_CADI -DSIMGEN_RELEASE=1 -DNDEBUG=1  -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE

CONFIGURATION=Linux64-Release-GCC-7.3

LDLIBS = /home/odishe01/FastModel/FastModelsPortfolio_11.10/lib/Linux64_GCC-7.3/libarmctmodel.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/plugins/Linux64_GCC-7.3/librosetta.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/plugins/Linux64_GCC-7.3/libctplugin.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/lib/Linux64_GCC-7.3/libcomponents.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/lib/Linux64_GCC-7.3/libz.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/lib/Linux64_GCC-7.3/libpvbus.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/lib/Linux64_GCC-7.3/libfmruntime.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/Iris/Linux64_GCC-7.3/libIrisSupport.a
LDFLAGS = -pthread -Wl,--no-undefined -fPIC -Wl,-rpath,'$$ORIGIN',-z,origin

sg_comma     := ,
sg_empty     :=
sg_space     := $(EMPTY) $(EMPTY)
sg_bra       := --start-group -(
sg_ket       := --end-group -)
define sg_nl

$(sg_empty)
endef

#
# Take the link options as a single argument and return:
#    * the empty string if we don't think we need an --end-group
#    * the string -Wl,--end-group if we think we need an --end-group
#
# The algorithm assumes that --start-group/--end-group are not nested.
#
# Process the options passed as the first argument as follows:
#    * chose only those arguments that match / -Wl[^ ]*/
#    * s/ -Wl,/ /g
#    * s/,/ /g
#    * filter only the --start-group/-(/--end-group/-) options
#    * find the last word
#    * if it is one of --start-group or -( then expand to
#      -Wl,--end-group
#    * otherwise return the empty string
CLOSE_GROUP =							\
	$(if							\
	    $(filter $(sg_bra),					\
	    $(lastword						\
	    $(filter $(sg_bra) $(sg_ket),			\
	    $(subst $(sg_comma),$(sg_space),			\
	    $(subst $(sg_space)-Wl$(sg_comma),$(sg_space),	\
	    $(filter -Wl%,$(sg_space)$(1)			\
	    )))))), 						\
            -Wl$(sg_comma)--end-group,)

# If the user has put --start-group in ADDITIONAL_LINKER_SETTINGS
# then we have to close it before linking in SYSTEMLIBS or sometimes
# we won't resolve all the symbols to those libraries.
SYSTEMLIBS = $(call CLOSE_GROUP,$(LDFLAGS)) -ldl -lrt -Wl,--as-needed -latomic -Wl,--no-as-needed

# We attempt to detect that the PVModelLib has changed and if so
# rebuild everything.  We do this by making $(DEPENDENCY_FILE) be a
# dependency on all compiled objects.
#
# $(DEPENDENCY_FILE) is a concatenation of $(dependency_prefix) and
# the contents of the PVVersion.h file that ships with PVModelLib.
#
# We also produce an extra file:
#       $(DEPENDENCY_FILE).debug
# that is only intended for debug use which is the expected contents
# of the dependency file.
#
# NOTE that INCLUDE_DIRS can depend on environment variables passed
# in, and more generally the other flags so we put those as
# dependencies as well.
#
# NOTE any other makefile variables that the build depends on can be added to
# construct_dependency_prefix
#
define construct_dependency_prefix
PVLIB_HOME='$(PVLIB_HOME)'
SYSTEMC_HOME='$(SYSTEMC_HOME)'
TLM_HOME='$(TLM_HOME)'
CXXFLAGS_EXT='$(CXXFLAGS_EXT)'
CPPFLAGS_EXT='$(CXXFLAGS_EXT)'
LDLIBS='$(LDLIBS)'
LDFLAGS='$(LDFLAGS)'
-- $(PVVERSION_H) --
endef


#
# We would like to export the contents of the makefile variable
# construct_dependency_prefix directly as a stream or a file.  However
# there is no direct way to do this.  After make 4.0 then there is
# $(file) that could be used to read/write files.  Prior to this then
# there is a trick to export the var as an env var and then get the
# shell to expand it and put it in a file.  However, it appears that
# the export of the make var is only when executing recipes and not at
# the top-level as we need it here.  Thus we are left having to quote
# the make variable's contents to shell.
#
# For sh variants, then it is enough to quote all special characters
# except for newline, by surrounding in ' and changing all ' in the
# string to '\''.
#
# In order to quote new lines to the shell then there is a slight
# difference between bash, sh, dash
#
#    bash:   echo 'abc'$'\n''def'
#    sh  :   echo 'abc\ndef'
#    dash:   echo 'abc\ndef'
#
# NOTE that what we are doing is not quite the same in all cases.  For
# bash, we are constructing a string with the newline embedded in it.
# For sh and dash, we are constructing a string with the literal '\n'
# in it.  echo then interprets this escape sequence.
#
# In sh, then it is hard to construct a literal newline in a string
# without being able to actually have a newline character in the
# input, but Make will remove the newlines and turn them to spaces.
# Thus we would have to do:
#
#    NL=$(echo "\nDUMMY"); NL=${NL%DUMMY};
#
# and then do things like:
#
#    VAR='abc\tdef'"$NL"'ghi\tklm'
#
# However, you still can't pass this to echo as it will interpret the
# \t, etc. as escape characters.  Instead we would have to pass it to:
#        /usr/bin/printf "%s" "$VAR"
# which won't try and interpret the \t, etc.
#
# So in the end we may as well just quote it for echo.
#
__shell__ := $(notdir $(SHELL))
ifneq (,$(filter $(__shell__),bash))
    # In bash-mode, then you need echo -e to make it interpret the escapes
    # as newline/tab, etc.  Instead we embed a literal \n in.
    quote_to_echo       = '$(subst $(sg_nl),'$$'\n'',$(subst ','\'',$(1)))' #'
else ifneq (,$(filter $(__shell__),sh dash))
    # bash as sh, or dash then echo interprets escape characters in its arguments
    # and so we need to quote all \ to \\
    quote_to_echo       = '$(subst $(sg_nl),\n,$(subst ','\'',$(subst \,\\,$(1))))' # '
else
    $(error "Unrecognised shell $(__shell__) [$(SHELL)]")
endif

dependency_prefix := $(call quote_to_echo,$(construct_dependency_prefix))

$(shell \
     [ ! -e "$(DEPENDENCY_FILE)" ]				\
     || echo $(dependency_prefix)				\
        | cat - "$(PVVERSION_H)"         2> /dev/null		\
        | tee "$(DEPENDENCY_FILE).debug"			\
        | diff -q - "$(DEPENDENCY_FILE)"  > /dev/null 2>&1	\
     || rm -f "$(DEPENDENCY_FILE)"       2> /dev/null      	\
)

$(DEPENDENCY_FILE):
	@echo "Making dependency file $@...\n" ; \
	echo $(dependency_prefix) | cat - "$(PVVERSION_H)" > "$@"

APPLICATION=

# Objects used by all targets
COMMON_OBJECTS = gen/Comp_1.o gen/Comp_2.o gen/CADI_Ctors_DSO.o gen/DMA_Utils.o

# Objects specific to classic SystemC export
SC_OBJECTS      = 

# Object which are not safe to link into a DSO used by SCX
NONDSO_OBJECTS  = gen/Comp_NonDSO_1.o gen/Comp_NonDSO_2.o gen/Comp_NonDSO_3.o gen/Comp_NonDSO_4.o gen/Comp_NonDSO_5.o gen/CADI_Ctors_NonDSO.o gen/scx_evs_DMA.o

# Objects specific to MI SystemC export
SCX_OBJECTS     = gen/scx_report_handler.o gen/scx_simcontroller.o gen/scx_scheduler_mapping.o

# Objects specific to ISIM systems
ISIM_OBJECTS    = 

# Automatically generated main for SystemC exports
ifneq (NULL,$(firstword NULL))
	SRC_MAIN_SYSTEM = NULL
else ifneq (,$(findstring ARM_VALIDATION_SYSTEMC_MAIN,$(CPPFLAGS_EXT)))
	SRC_MAIN_SYSTEM = $(OUT_DIR)/scx_main_system_val.cpp
else
	SRC_MAIN_SYSTEM = $(OUT_DIR)/scx_main_system.cpp
endif

SYSTEMC_LIB = -L$(SYSTEMC_HOME)/lib/Linux64_GCC-$(GCC_VER) -lsystemc
GCC_VER = $(word 2, $(subst -, ,gcc-7.3))
CXX_BUILDMAINCMD = $(CXX) $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -o isim_system $(SRC_MAIN_SYSTEM) -L. $(LDFLAGS) \
                   -lisim_system -lscx-$(TOP_COMPONENT)-$(CONFIG) -lscx $(SYSTEMC_LIB) $(LDLIBS) $(SYSTEMLIBS)

isim: isim_system

pre_comp: 

# pre-compile not enabled



post_build:
	

gen/Comp_1.o: gen/Comp_1.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC -DSG_BUILDING_DSO_DMA  -fvisibility=hidden -MMD -c -o gen/Comp_1.o  gen/Comp_1.cpp

gen/Comp_2.o: gen/Comp_2.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC -DSG_BUILDING_DSO_DMA  -fvisibility=hidden -MMD -c -o gen/Comp_2.o  gen/Comp_2.cpp

gen/CADI_Ctors_DSO.o: gen/CADI_Ctors_DSO.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC -DSG_BUILDING_DSO_DMA  -fvisibility=hidden  -O0 -MMD -c -o gen/CADI_Ctors_DSO.o  gen/CADI_Ctors_DSO.cpp

gen/DMA_Utils.o: gen/DMA_Utils.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC -DSG_BUILDING_DSO_DMA  -fvisibility=hidden -MMD -c -o gen/DMA_Utils.o  gen/DMA_Utils.cpp

gen/Comp_NonDSO_1.o: gen/Comp_NonDSO_1.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -MMD -c -o gen/Comp_NonDSO_1.o  gen/Comp_NonDSO_1.cpp

gen/Comp_NonDSO_2.o: gen/Comp_NonDSO_2.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -MMD -c -o gen/Comp_NonDSO_2.o  gen/Comp_NonDSO_2.cpp

gen/Comp_NonDSO_3.o: gen/Comp_NonDSO_3.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -MMD -c -o gen/Comp_NonDSO_3.o  gen/Comp_NonDSO_3.cpp

gen/Comp_NonDSO_4.o: gen/Comp_NonDSO_4.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -MMD -c -o gen/Comp_NonDSO_4.o  gen/Comp_NonDSO_4.cpp

gen/Comp_NonDSO_5.o: gen/Comp_NonDSO_5.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -MMD -c -o gen/Comp_NonDSO_5.o  gen/Comp_NonDSO_5.cpp

gen/CADI_Ctors_NonDSO.o: gen/CADI_Ctors_NonDSO.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden  -O0 -MMD -c -o gen/CADI_Ctors_NonDSO.o  gen/CADI_Ctors_NonDSO.cpp

gen/scx_evs_DMA.o: gen/scx_evs_DMA.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -MMD -c -o gen/scx_evs_DMA.o  gen/scx_evs_DMA.cpp

gen/scx_report_handler.o: gen/scx_report_handler.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -MMD -c -o gen/scx_report_handler.o  gen/scx_report_handler.cpp

gen/scx_simcontroller.o: gen/scx_simcontroller.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -MMD -c -o gen/scx_simcontroller.o  gen/scx_simcontroller.cpp

gen/scx_scheduler_mapping.o: gen/scx_scheduler_mapping.cpp
	$(CXX)  $(CXXFLAGS_EXT)  $(CPPFLAGS_EXT) -DSG_TARGET_SYSTEMC  -fvisibility=hidden -MMD -c -o gen/scx_scheduler_mapping.o  gen/scx_scheduler_mapping.cpp



#
# Add the $(DEPENDENCY_FILE) as a dependency to all objects
#
define add_dependency
$(1): $(DEPENDENCY_FILE)

endef
$(foreach OBJECT,\
          $(COMMON_OBJECTS) $(SC_OBJECTS) $(NONDSO_OBJECTS) $(SCX_OBJECTS) $(ISIM_OBJECTS) $(SRC_MAIN_SYSTEM),\
          $(eval $(call add_dependency,$(OBJECT))))

systemc_isim: libscx.a libscx-$(TOP_COMPONENT)-$(CONFIG).a libisim_system.a
	$(CXX_BUILDMAINCMD)

isim_system: $(COMMON_OBJECTS) $(NONDSO_OBJECTS) $(ISIM_OBJECTS) $(LDLIBS)
	$(CXX) -o $@ $(COMMON_OBJECTS) $(NONDSO_OBJECTS) $(ISIM_OBJECTS) $(LDFLAGS) $(LDLIBS) $(SYSTEMLIBS)

libisim_system.a: $(COMMON_OBJECTS) $(NONDSO_OBJECTS)
	rm -f $@
	$(AR) cru $@ $(COMMON_OBJECTS) $(NONDSO_OBJECTS)
	$(RANLIB) $@

cadi_system_$(CONFIG).so: $(COMMON_OBJECTS) $(NONDSO_OBJECTS) $(LDLIBS)
	$(CXX) -shared  -o $@ $(COMMON_OBJECTS) $(NONDSO_OBJECTS) -Wl,--exclude-libs,ALL $(LDFLAGS) $(LDLIBS) $(SYSTEMLIBS)

scx_cadi_system_$(CONFIG).so: $(COMMON_OBJECTS) $(NONDSO_OBJECTS) $(SCX_OBJECTS) $(LDLIBS)
	$(CXX) -shared  -o $@ $(COMMON_OBJECTS) $(NONDSO_OBJECTS) $(SCX_OBJECTS) -Wl,--exclude-libs,ALL $(LDFLAGS) $(LDLIBS) $(SYSTEMLIBS) $(SYSTEMC_LIB)

ifeq ($(LDLIBS),)
     AR_DIR=
else
     AR_DIR=__tmp__/*.*
endif

$(TOP_COMPONENT)-sc_sg_wrapper-$(CONFIG).a: $(SC_OBJECTS) $(NONDSO_OBJECTS) $(COMMON_OBJECTS)
	rm -f $@
	mkdir -p __tmp__ 
	cd __tmp__  && files='/home/odishe01/FastModel/FastModelsPortfolio_11.10/lib/Linux64_GCC-7.3/libarmctmodel.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/plugins/Linux64_GCC-7.3/librosetta.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/plugins/Linux64_GCC-7.3/libctplugin.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/lib/Linux64_GCC-7.3/libcomponents.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/lib/Linux64_GCC-7.3/libz.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/lib/Linux64_GCC-7.3/libpvbus.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/lib/Linux64_GCC-7.3/libfmruntime.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/Iris/Linux64_GCC-7.3/libIrisSupport.a' ; \
	for file in $$files ; do \
	   file $$file | grep 'archive' > /dev/null; \
	   if [ $$? -eq 1 ]; then (`cp $$file .`)  else (ar x $$file) fi; \
	done
	$(AR) cru $@ $(SC_OBJECTS) $(NONDSO_OBJECTS) $(COMMON_OBJECTS) $(AR_DIR)
	$(RANLIB) $@
	$(CXX) -shared -o $(TOP_COMPONENT)-sc_sg_wrapper-$(CONFIG).so $(SC_OBJECTS) $(NONDSO_OBJECTS) $(COMMON_OBJECTS) -fPIC /home/odishe01/FastModel/FastModelsPortfolio_11.10/lib/Linux64_GCC-7.3/libarmctmodel.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/plugins/Linux64_GCC-7.3/librosetta.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/plugins/Linux64_GCC-7.3/libctplugin.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/lib/Linux64_GCC-7.3/libcomponents.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/lib/Linux64_GCC-7.3/libz.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/lib/Linux64_GCC-7.3/libpvbus.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/lib/Linux64_GCC-7.3/libfmruntime.a /home/odishe01/FastModel/FastModelsPortfolio_11.10/Iris/Linux64_GCC-7.3/libIrisSupport.a
	rm -rf __tmp__ 
	cp $(TOP_COMPONENT)-sc_sg_wrapper-$(CONFIG).so ..

scx: libscx.a libscx-$(TOP_COMPONENT)-$(CONFIG).a lib$(TOP_COMPONENT)-$(CONFIG).so

libscx.a: $(SCX_OBJECTS)
	$(AR) cru $@ $(SCX_OBJECTS)

libscx-$(TOP_COMPONENT)-$(CONFIG).a: $(NONDSO_OBJECTS)
	$(AR) cru $@ $(NONDSO_OBJECTS)
	$(RANLIB) $@

lib$(TOP_COMPONENT)-$(CONFIG).so: $(COMMON_OBJECTS) $(LDLIBS)
	$(CXX) -shared -o $@ $(COMMON_OBJECTS) $(LDFLAGS) $(LDLIBS) $(SYSTEMLIBS)

clean:
	rm -f $(COMMON_OBJECTS) \
	$(SC_OBJECTS) \
	$(NONDSO_OBJECTS) \
	$(SCX_OBJECTS) \
	$(ISIM_OBJECTS) \
	isim isim_system \
	cadi_system_$(CONFIG).so \
	scx_cadi_system_$(CONFIG).so \
	$(TOP_COMPONENT)-sc_sg_wrapper-$(CONFIG).a \
	$(TOP_COMPONENT)-sc_sg_wrapper-$(CONFIG).so \
	libscx.a \
	libscx-$(TOP_COMPONENT)-$(CONFIG).a \
	lib$(TOP_COMPONENT)-$(CONFIG).so \
	$(DEPENDENCY_FILE) \
	$(DEPENDENCY_FILE).debug \
	rm -rf $(OUT_DIR)
	
